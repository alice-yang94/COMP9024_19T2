#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#define MIN_NUM 10001
#define MAX_NUM 25000

#define M 3
#define N 4
#define P 4

#define FIB_MAX 10


/**
 * There is a 5-digit number that satisfies 4 * abcde = edcba, 
 * that is, when multiplied by 4 yields the same number read backwards.
 * Write a C-program to find this number.
*/
int fiveDigit(void);

/**
 * Write a C-function that returns the inner product of 
 * two n-dimensional vectors a and b, 
 * encoded as 1-dimensional arrays of n floating point numbers. 
 * By the way, the inner product of two vectors is calculated by 
 * the sum for i=1..n of ai * bi
*/
float innerProdFun(float a[], float b[], int n);

/**
 * Write a C-function to compute C as the matrix product of matrices A and B.
 * the product of an m x n matrix A and an n x p matrix B is the m x p matrix C 
 * such that Cij is the sum for k=1..n of Aik * Bkj for all i∈{1..m} and j∈{1..p}
*/
void matrixProduct(float a[M][N], float b[N][P], float c[M][P]);

/**
 * Write a C-program that outputs, in alphabetical order, all strings that 
 * use each of the characters 'a', 'b', 'l', 'e' exactly once.
*/
void able(void);

/**
 * Write a C-function that takes a positive integer n as argument and 
 * prints a series of numbers generated by the following algorithm, 
 * until 1 is reached:
 * 
 * if n is even, then n ← n/2
 * if n is odd, then n ← 3*n+1
*/
void collatzeFib(void);
void collatze(int n);

/**
 * Write a C-function that takes 3 integers as arguments and 
 * returns the largest of them:
 * 
 * You are permitted to only use assignment statements, 
 * a return statement and Boolean expressions
 * 
 * You are not permitted to use if-statements, 
 * loops (e.g. a while-statement), function calls or any data 
 * or control structures
 * 
*/
int fastMax(int num1, int num2, int num3);